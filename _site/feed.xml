<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-28T01:22:51+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hacker’s Hive</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">GitHub Basics - Installation and Setup</title><link href="http://localhost:4000/git/github/2023/10/28/github-basics-installation-and-setup.html" rel="alternate" type="text/html" title="GitHub Basics - Installation and Setup" /><published>2023-10-28T00:00:00+05:30</published><updated>2023-10-28T00:00:00+05:30</updated><id>http://localhost:4000/git/github/2023/10/28/github-basics-installation-and-setup</id><content type="html" xml:base="http://localhost:4000/git/github/2023/10/28/github-basics-installation-and-setup.html"><![CDATA[<h1 id="install-git">Install Git</h1>

<h2 id="linux">Linux</h2>

<h3 id="step-11-update-the-system">Step 1.1: Update the system</h3>

<p>Run these commands in the terminal to update the Linux system:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
sudo apt upgrade
</code></pre></div></div>

<h3 id="step-12-install-git">Step 1.2: Install Git</h3>
<p>You likely have git installed already, but to make sure that we have the most up-to-date version of git, run the following commands:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo add-apt-repository ppa:git-core/ppa
sudo apt update
sudo apt install git
</code></pre></div></div>

<h3 id="step-13-verify-version">Step 1.3: Verify version</h3>
<p>Make sure your Git version is at least 2.28 by running this command:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git --version
</code></pre></div></div>

<h2 id="macos">MacOS</h2>

<h3 id="step-10-install-homebrew">Step 1.0: Install Homebrew</h3>

<p>First, you’ll need to install Homebrew. Make sure you have checked the requirements here. Once you meet the requirements, copy and paste the following into your terminal:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
</code></pre></div></div>

<h3 id="step-11-update-git">Step 1.1: Update Git</h3>
<p>MacOS already comes with a version of Git, but you should update to the latest version. In the terminal, type</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install git
</code></pre></div></div>
<p>This will install the latest version of Git. Easy, right?</p>

<h3 id="step-12-verify-version">Step 1.2: Verify version</h3>
<p>If you have just installed and/or updated Git from the previous step, first close that terminal window.</p>

<p>Open a new terminal window and then make sure your Git version is at least 2.28 by running this command:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git --version
</code></pre></div></div>

<h2 id="windows">Windows</h2>

<p>For Windows head over to <a href="https://git-scm.com/downloads">Git</a> website and download the software</p>

<p>After installation, you can use either GUI or CLI</p>

<h2 id="setup">Setup</h2>

<h3 id="step-21-setup-git">Step 2.1: Setup Git</h3>
<p>For Git to work properly, we need to let it know who we are so that it can link a local Git user (you) to GitHub. When working on a team, this allows people to see what you have committed and who committed each line of code.</p>

<p>The commands below will configure Git. Be sure to enter your own information inside the quotes (but include the quotation marks)!</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global user.name "Your Name"
git config --global user.email "yourname@example.com"
</code></pre></div></div>
<p>GitHub recently changed the default branch on new repositories from master to main. Change the default branch for Git using this command:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global init.defaultBranch main
</code></pre></div></div>
<p>To enable colorful output with git, type</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global color.ui auto
</code></pre></div></div>
<p>To verify that things are working properly, enter these commands and verify whether the output matches your name and email address.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --get user.name
git config --get user.email
</code></pre></div></div>

<h3 id="step-23-create-an-ssh-key">Step 2.3: Create an SSH key</h3>
<p>An SSH key is a cryptographically secure identifier. It’s like a really long password used to identify your machine. GitHub uses SSH keys to allow you to upload to your repository without having to type in your username and password every time.</p>

<p>First, we need to see if you have an Ed25519 algorithm SSH key already installed. Type this into the terminal and check the output with the information below:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls ~/.ssh/id_ed25519.pub
</code></pre></div></div>
<p>If a message appears in the console containing the text “No such file or directory”, then you do not yet have an Ed25519 SSH key, and you will need to create one. If no such message has appeared in the console output, you can proceed to step 2.4.</p>

<p>To create a new SSH key, run the following command inside your terminal.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen -t ed25519 -C "your@email.com"
</code></pre></div></div>

<h3 id="step-24-link-your-ssh-key-with-github">Step 2.4: Link your SSH key with GitHub</h3>
<p>Now, you need to tell GitHub what your SSH key is so that you can push your code without typing in a password every time.</p>

<p>First, you’ll navigate to where GitHub receives our SSH key. Log into GitHub and click on your profile picture in the top right corner. Then, click on Settings in the drop-down menu.</p>

<p>Next, on the left-hand side, click the SSH and GPG keys. Then, click the green button in the top right corner that says New SSH Key. Name your key something that is descriptive enough for you to remember where it came from. Leave this window open while you do the next steps.</p>

<p>Now you need to copy your public SSH key. To do this, we’re going to use a command called cat to read the file to the console. (Note that the .pub file extension is essential in this case.)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat ~/.ssh/id_ed25519.pub
</code></pre></div></div>
<p>Highlight and copy the output, which starts with ssh-ed25519 and ends with your email address.</p>

<p>Now, go back to GitHub in your browser window and paste the key you copied into the key field. Keep the key type as Authentication Key and then, click Add SSH key. You’re done! You’ve successfully added your SSH key!</p>

<h1 id="conclusion">Conclusion</h1>

<p>You’ve completed the basic installations section, good job! As you progress through the Paths there will be other tools to install, so keep an eye out!</p>

<p>You probably felt like you were way in over your head, and you probably didn’t understand much of what you were doing. That’s 100% normal. Hang in there. You can do this! And we’ve got your back.</p>]]></content><author><name>Abhay</name></author><category term="Git" /><category term="Github" /><category term="Git github installation" /><summary type="html"><![CDATA[Install Git]]></summary></entry><entry><title type="html">Creating your first Smart Contract in Solidity</title><link href="http://localhost:4000/blockchain/development/2023/10/22/Creating-your-first-Smart-Contract-in-Solidity.html" rel="alternate" type="text/html" title="Creating your first Smart Contract in Solidity" /><published>2023-10-22T00:00:00+05:30</published><updated>2023-10-22T00:00:00+05:30</updated><id>http://localhost:4000/blockchain/development/2023/10/22/Creating-your-first-Smart-Contract-in-Solidity</id><content type="html" xml:base="http://localhost:4000/blockchain/development/2023/10/22/Creating-your-first-Smart-Contract-in-Solidity.html"><![CDATA[<h1 id="-creating-your-first-smart-contract-with-solidity-"><span style="font-size: 4.25em; font-weight: bold; text-decoration: underline"> Creating Your First Smart Contract with Solidity </span></h1>

<h2 id="-what-are-smart-contracts-"><span style="color: gold"> What are Smart Contracts? </span></h2>

<p>Smart contracts are self-executing contracts (programs) with the terms and conditions of an agreement directly written into code.
They run on blockchain technology such as Ethereum, ensuring that the terms of the contract are automatically enforced without the need for any intermediaries.
Smart contracts are programs that govern the behavior of accounts within the Ethereum state.
Smart contracts are a type of Ethereum account. This means they have a balance and can be the target of transactions.
However they’re not controlled by a user, instead they are deployed to the network and run as programmed.
User accounts can then interact with a smart contract by submitting transactions that execute a function defined on the smart contract.
Smart contracts can define rules, like a regular contract, and automatically enforce them via the code.
Smart contracts cannot be deleted by default, and interactions with them are irreversible.</p>

<h2 id="-what-is-solidity-"><span style="color: gold"> What is Solidity? </span></h2>

<p>Solidity is an object-oriented, high-level language for implementing smart contracts.
Solidity is statically typed and supports inheritance, libraries, and complex user-defined types, among other features.
With Solidity, you can create contracts for uses such as voting, crowdfunding, blind auctions, and multi-signature wallets.
Smart contracts can be run on a local environment, for this guide we will be using and popular IDE Remix.</p>

<h2 id="-remix-ide-"><span style="color: gold"> REMIX IDE </span></h2>

<p>Remix is a popular web-based integrated development environment (IDE) specifically designed for Solidity smart contract development. It’s an excellent choice for beginners, as it provides a user-friendly interface and a built-in Ethereum development environment. In this guide, we will walk you through creating your very first smart contract using Remix.</p>

<h2 id="-your-first-smart-contract--simplestoragesol--"><span style="color: gold"> Your first smart-contract ( SimpleStorage.sol ) </span></h2>

<ol>
  <li>Go to <a href="https://remix.ethereum.org/">Remix</a></li>
  <li>You can check out the existing contracts in the contract folder.</li>
  <li>In the Remix IDE, create a new file and name it SimpleStorage.sol</li>
  <li>Write the Solidity code for the smart contract:</li>
</ol>

<pre><code class="language-solidity">// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint storedData;

    function set(uint x) public {
        storedData = x;
    }

    function get() public view returns (uint) {
        return storedData;
    }
}
</code></pre>

<p>The first line tells you that the source code is licensed under MIT. Machine-readable license specifiers are important in a setting where publishing the source code is the default.
The next line specifies that the source code is written for Solidity version 0.8.0, or a newer version of the language. This is to ensure that the contract is not compilable with a new (breaking) compiler version, where it could behave differently. Pragmas are common instructions for compilers about how to treat the source code (e.g. pragma once).
A contract in the sense of Solidity is a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain. The line uint storedData; declares a state variable called storedData of type uint (unsigned integer of 256 bits)
The contract defines the functions set and get that can be used to modify or retrieve the value of the variable storedData.</p>

<h2 id="-compiling-and-deploying-your-smart-contract-"><span style="color:gold"> Compiling and Deploying Your Smart Contract </span></h2>

<p>Now, let’s compile and deploy your smart contract using Remix:</p>

<ol>
  <li>
    <p>In the Remix IDE, go to the “Solidity Compiler” tab on the left.</p>
  </li>
  <li>
    <p>Click the “Compile SimpleStorage.sol” button. Remix will compile your contract.
 <img src="/assets/images/banners/compile-contract.png" alt="Compile Contract" /></p>
  </li>
  <li>
    <p>Head to the “Deploy &amp; Run Transactions” tab. Click on the deploy button.
 <img src="/assets/images/banners/deploy-contract-1.png" alt="Deploy Contract" /></p>
  </li>
</ol>

<h2 id="-interacting-with-your-smart-contract-"><span style="color:gold"> Interacting with your smart contract </span></h2>

<p>From the “Deploy” section, select your contract “SimpleStorage”. You can put in your value to be stored in storedData and click set to call the function set(). Further click on get to call get() and you will see the value stored in the variable storedData.
    <img src="/assets/images/banners/deploy-contract-2.png" alt="Interacting with Contract" /></p>

<h2 id="-conclusion-"><span style="color: gold"> Conclusion </span></h2>
<p>Congratulations! You have successfully deployed your first ever smart contract!!
I hope this post has helped in building a basic understanding of smart contracts and has incited a fuel to learn more about smart contracts. To further continue your study, you can refer to the links mentioned in references.</p>

<h2 id="-further-references-"><span style="color:gold"> Further References </span></h2>

<h3 id="documentations">Documentations</h3>

<ul>
  <li>
    <p><a href="https://docs.soliditylang.org/en/v0.8.21/introduction-to-smart-contracts.html#simple-smart-contract">Solidity Documentation</a></p>
  </li>
  <li>
    <p><a href="https://solidity-by-example.org/">Solidity by example</a></p>
  </li>
  <li>
    <p><a href="https://bitcoin.org/bitcoin.pdf">Satoshi Nakamoto(founder of Bitcoin) paper</a></p>
  </li>
</ul>

<h3 id="youtube-and-other-courses">Youtube and other courses</h3>

<ul>
  <li>
    <p><a href="https://youtu.be/gyMwXuJrbJQ?si=-IwopmbznCS-rair">Learn Blockchain, Solidity, and Full Stack Web3 Development with JavaScript – 32-Hour Course</a></p>
  </li>
  <li>
    <p><a href="https://www.udemy.com/course/build-your-blockchain-az/">Blockchain A-Z: Build a Blockchain, a Crypto + ChatGPT Bonus</a></p>
  </li>
</ul>]]></content><author><name>Advait Yadav</name></author><category term="Blockchain" /><category term="Development" /><category term="Ethereum" /><category term="Smart Contracts" /><category term="Solidity Programming" /><summary type="html"><![CDATA[Creating Your First Smart Contract with Solidity]]></summary></entry><entry><title type="html">Bee-Hive Mind</title><link href="http://localhost:4000/machine/learning/2023/09/12/postby-afnan.html" rel="alternate" type="text/html" title="Bee-Hive Mind" /><published>2023-09-12T00:00:00+05:30</published><updated>2023-09-12T00:00:00+05:30</updated><id>http://localhost:4000/machine/learning/2023/09/12/postby-afnan</id><content type="html" xml:base="http://localhost:4000/machine/learning/2023/09/12/postby-afnan.html"><![CDATA[<p>Introduction
Welcome to the world of machine learning, where our algorithms are as busy as bees in a hive! In this “bee-rilliant” blog post, we’ll take a whimsical journey through some of the most advanced machine learning packages available. Just like the bees in a hive work tirelessly to produce honey, these packages work tirelessly to make our lives sweeter. So, don your beekeeper suit, and let’s dive into the hive of machine learning!</p>

<p>Chapter 1 TensorFlow - The Queen Bee of Deep Learning
TensorFlow is the reigning queen bee of deep learning. Much like a queen bee rules her hive, TensorFlow rules the world of neural networks. Its intricate architecture and flexible ecosystem allow it to adapt to any machine learning task. TensorFlow’s “hive mind” of developers is constantly buzzing with activity, improving and expanding its capabilities.</p>

<p>Chapter 2 PyTorch - The Worker Bees of Flexibility
PyTorch, the “worker bees” of machine learning, are known for their flexibility. They tirelessly toil away, crafting dynamic computational graphs and enabling easy experimentation. Just as worker bees adapt to their hive’s needs, PyTorch adapts to your machine learning projects, making it perfect for research and development.</p>

<p>Chapter 3 Scikit-learn - The Pollinators of Simplicity
Scikit-learn is like the friendly neighborhood pollinators of the machine learning world. They bring simplicity and ease to complex tasks. Just as bees pollinate flowers to make them bloom, Scikit-learn helps your projects flourish by offering a wide range of machine learning algorithms and tools.</p>

<p>Chapter 4 XGBoost - The Waggle Dance of Optimization
XGBoost performs a sophisticated “waggle dance” to find the sweetest solutions to your predictive problems. This package combines the power of gradient boosting with an optimized algorithm, much like the intricate waggle dance bees use to communicate the location of nectar.</p>

<p>Chapter 5 Keras - The Beekeepers of High-Level Abstraction
Keras is like the beekeepers who tend to their hives, providing a high-level abstraction for building and training neural networks. Just as beekeepers protect their bees, Keras shields you from the complexities of deep learning, making it accessible for everyone.</p>

<p>Chapter 6 The Swarm Intelligence of AutoML
AutoML is the embodiment of swarm intelligence, where multiple algorithms work together harmoniously. It’s as if a hive of bees collaborates to solve complex problems. AutoML automates the machine learning pipeline, from data preprocessing to model selection, to save you time and effort.</p>

<p>Conclusion Nectar of Knowledge
In the world of machine learning, these “bees” work tirelessly to collect the nectar of knowledge. TensorFlow reigns supreme, while PyTorch, Scikit-learn, XGBoost, Keras, and AutoML play crucial roles in our “hive” of tools. Just like the bees in a hive, they each have their unique strengths, contributing to the rich ecosystem of machine learning.</p>

<p>So, as you embark on your journey through the “bee-hive” of machine learning, remember that these packages are your trusty pollinators, buzzing with potential and ready to make your projects sweeter than honey. Happy coding, fellow beekeepers of the machine learning world!</p>]]></content><author><name>Afnan Ahmed</name></author><category term="Machine" /><category term="Learning" /><category term="Deep Learning" /><category term="Data Science" /><category term="Artificial Intelligence" /><category term="Python Programming" /><category term="Advanced Technology" /><summary type="html"><![CDATA[Introduction Welcome to the world of machine learning, where our algorithms are as busy as bees in a hive! In this “bee-rilliant” blog post, we’ll take a whimsical journey through some of the most advanced machine learning packages available. Just like the bees in a hive work tirelessly to produce honey, these packages work tirelessly to make our lives sweeter. So, don your beekeeper suit, and let’s dive into the hive of machine learning!]]></summary></entry></feed>